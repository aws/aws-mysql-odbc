name: Dockerized Tests

on:
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**/*.md'

env:
  BUILD_TYPE: Release

jobs:
  build-dockerized-community-tests:
    name: Dockerized Community Tests
    runs-on: ubuntu-latest
    env:
      CMAKE_GENERATOR: Unix Makefiles

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      # Configure build environment/dependencies
      - name: Install MySQL client libs & other dependencies
        run: sudo apt-get update && sudo apt-get install 
                build-essential 
                libgtk-3-dev 
                libmysqlclient-dev 
                unixodbc
                unixodbc-dev
                curl
                libcurl4-openssl-dev

      - name: Create build environment
        shell: bash
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        run: cmake -S . -B build
                -G "$CMAKE_GENERATOR"
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE
                -DMYSQLCLIENT_STATIC_LINKING=TRUE
                -DENABLE_INTEGRATION_TESTS=FALSE
                -DENABLE_GTESTS=TRUE
                -DWITH_UNIXODBC=1

      # Build driver
      - name: Build driver
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      
      - name: 'Run Community Tests'
        working-directory: ${{ github.workspace }}/testframework
        run: |
          ./gradlew --no-parallel --no-daemon test-community --info
        env:
          TEST_DSN: myodbc8a
          TEST_USERNAME: root
          TEST_PASSWORD: root
          DRIVER_PATH: ${{ github.workspace }}/build
          
  build-dockerized-integration-tests:
    name: Dockerized Integration Tests 
    runs-on: ubuntu-latest
    env:
      CMAKE_GENERATOR: Unix Makefiles

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      # Configure build environment/dependencies
      - name: Install MySQL client libs & other dependencies
        run: sudo apt-get update && sudo apt-get install 
                build-essential 
                libgtk-3-dev 
                libmysqlclient-dev 
                unixodbc
                unixodbc-dev
                curl
                libcurl4-openssl-dev

      - name: Create build environment
        shell: bash
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        run: cmake -S . -B build
                -G "$CMAKE_GENERATOR"
                -DCMAKE_BUILD_TYPE=$BUILD_TYPE
                -DMYSQLCLIENT_STATIC_LINKING=TRUE
                -DENABLE_INTEGRATION_TESTS=TRUE
                -DENABLE_GTESTS=FALSE
                -DWITH_UNIXODBC=1

      # Build driver
      - name: Build driver
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config $BUILD_TYPE

      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: 'Set up Temp AWS Credentials'
        run: |
          creds=($(aws sts get-session-token \
            --duration-seconds 3600 \
            --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' \
            --output text \
          | xargs));
          echo "::add-mask::${creds[0]}"
          echo "::add-mask::${creds[1]}"
          echo "::add-mask::${creds[2]}"
          echo "TEMP_AWS_ACCESS_KEY_ID=${creds[0]}" >> $GITHUB_ENV
          echo "TEMP_AWS_SECRET_ACCESS_KEY=${creds[1]}" >> $GITHUB_ENV
          echo "TEMP_AWS_SESSION_TOKEN=${creds[2]}" >> $GITHUB_ENV
      
      - name: 'Run Integration Tests'
        working-directory: ${{ github.workspace }}/testframework
        run: |
          ./gradlew --no-parallel --no-daemon test-failover --info
        env:
          TEST_DSN: atlas
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          TEST_DB_CLUSTER_IDENTIFIER: ${{ secrets.TEST_DB_CLUSTER_IDENTIFIER }}-${{ github.run_id }}-${{ github.run_attempt }}
          AWS_ACCESS_KEY_ID: ${{ env.TEMP_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.TEMP_AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.TEMP_AWS_SESSION_TOKEN }}
          DRIVER_PATH: ${{ github.workspace }}/build

      - name: 'Display and save log'
        if: always()
        working-directory: ${{ github.workspace }}/build
        run: |
          echo "Displaying logs"
          if [[ -f myodbc.sql && -s myodbc.sql ]]; then 
            cat myodbc.sql
            mkdir -p ./reports/tests
            cp myodbc.sql ./reports/tests/myodbc.sql
          fi

      - name: 'Archive log results'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'integration-test-logs'
          path: build/reports/tests/
          retention-days: 5
